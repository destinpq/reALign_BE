generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model audit_logs {
  id              String           @id
  userId          String?
  action          String
  entityType      String?
  entityId        String?
  oldValues       Json?
  newValues       Json?
  metadata        Json?
  ipAddress       String?
  userAgent       String?
  source          AuditSource      @default(API)
  createdAt       DateTime         @default(now())
  payments        payments?        @relation(fields: [entityId], references: [id], map: "audit_logs_payment_fkey")
  processing_jobs processing_jobs? @relation(fields: [entityId], references: [id], map: "audit_logs_processing_job_fkey")
  transactions    transactions?    @relation(fields: [entityId], references: [id], map: "audit_logs_transaction_fkey")
  users           users?           @relation(fields: [userId], references: [id])
}

model avatar_customizations {
  id               String              @id
  userId           String
  name             String
  primaryColor     String?
  secondaryColor   String?
  colorName        String?
  size             Size?
  fit              Fit?
  customAttributes Json?
  status           CustomizationStatus @default(DRAFT)
  processingJobId  String?             @unique
  createdAt        DateTime            @default(now())
  updatedAt        DateTime
  processing_jobs  processing_jobs?    @relation(fields: [processingJobId], references: [id])
  users            users               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model avatar_generations {
  id                String   @id
  sessionId         String   @unique
  userImage         String
  selectedWearables Json
  selectedScenery   String
  userDetails       Json
  generatedPrompt   String
  status            String   @default("PENDING_PAYMENT")
  paymentId         String?
  generatedImageUrl String?
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime
}

model email_notifications {
  id            String      @id
  userId        String?
  to            String
  from          String
  subject       String
  template      String
  templateData  Json?
  status        EmailStatus @default(PENDING)
  sentAt        DateTime?
  failureReason String?
  attempts      Int         @default(0)
  maxAttempts   Int         @default(3)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  users         users?      @relation(fields: [userId], references: [id])
}

model payments {
  id                String         @id
  userId            String
  subscriptionId    String?
  razorpayPaymentId String?        @unique
  razorpayOrderId   String?        @unique
  razorpaySignature String?
  amount            Decimal        @db.Decimal(10, 2)
  currency          String         @default("INR")
  status            PaymentStatus  @default(PENDING)
  method            String?
  description       String?
  failureReason     String?
  creditsAwarded    Int            @default(0)
  metadata          Json?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime
  audit_logs        audit_logs[]
  subscriptions     subscriptions? @relation(fields: [subscriptionId], references: [id])
  users             users          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions      transactions[]
}

model photos {
  id               String   @id
  userId           String
  filename         String
  originalFilename String
  s3Key            String   @unique
  s3Bucket         String
  mimeType         String
  size             Int
  title            String?
  description      String?
  imageBlob        Bytes?
  isGenerated      Boolean  @default(false)
  generatedFrom    String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  users            users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model processing_jobs {
  id                    String                 @id
  userId                String
  type                  ProcessingType
  status                ProcessingStatus       @default(PENDING)
  externalId            String?                @unique
  inputData             Json?
  outputData            Json?
  creditsUsed           Int                    @default(0)
  errorMessage          String?
  startedAt             DateTime?
  completedAt           DateTime?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime
  audit_logs            audit_logs[]
  avatar_customizations avatar_customizations?
  users                 users                  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model projects {
  id          String   @id
  userId      String
  name        String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  users       users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model sessions {
  id           String   @id
  userId       String
  refreshToken String   @unique
  isValid      Boolean  @default(true)
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model subscriptions {
  id                     String             @id
  userId                 String
  type                   SubscriptionType
  status                 SubscriptionStatus @default(ACTIVE)
  startDate              DateTime           @default(now())
  endDate                DateTime?
  autoRenew              Boolean            @default(true)
  paymentMethod          String?
  razorpaySubscriptionId String?            @unique
  creditsIncluded        Int
  creditsUsed            Int                @default(0)
  createdAt              DateTime           @default(now())
  updatedAt              DateTime
  payments               payments[]
  users                  users              @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions           transactions[]
}

model transaction_analytics {
  id                        String   @id
  date                      DateTime @unique
  hour                      Int?
  totalTransactions         Int      @default(0)
  successfulTransactions    Int      @default(0)
  failedTransactions        Int      @default(0)
  pendingTransactions       Int      @default(0)
  cancelledTransactions     Int      @default(0)
  refundedTransactions      Int      @default(0)
  disputedTransactions      Int      @default(0)
  totalAmount               Float    @default(0)
  successfulAmount          Float    @default(0)
  failedAmount              Float    @default(0)
  refundedAmount            Float    @default(0)
  disputedAmount            Float    @default(0)
  netAmount                 Float    @default(0)
  razorpayTransactions      Int      @default(0)
  razorpayAmount            Float    @default(0)
  razorpayFees              Float    @default(0)
  stripeTransactions        Int      @default(0)
  stripeAmount              Float    @default(0)
  stripeFees                Float    @default(0)
  totalGatewayFees          Float    @default(0)
  totalPlatformFees         Float    @default(0)
  totalTaxes                Float    @default(0)
  totalProcessingFees       Float    @default(0)
  creditsAwarded            Int      @default(0)
  creditsUsed               Int      @default(0)
  creditTransactions        Int      @default(0)
  creditRefunds             Int      @default(0)
  bonusCreditsAwarded       Int      @default(0)
  subscriptionPayments      Int      @default(0)
  subscriptionAmount        Float    @default(0)
  newSubscriptions          Int      @default(0)
  renewalSubscriptions      Int      @default(0)
  upgrades                  Int      @default(0)
  downgrades                Int      @default(0)
  cancellations             Int      @default(0)
  uniqueUsers               Int      @default(0)
  newUsers                  Int      @default(0)
  returningUsers            Int      @default(0)
  highValueUsers            Int      @default(0)
  domesticTransactions      Int      @default(0)
  internationalTransactions Int      @default(0)
  topCountries              Json?
  topStates                 Json?
  averageTransactionTime    Float?
  successRate               Float?
  failureRate               Float?
  averageTransactionValue   Float?
  highRiskTransactions      Int      @default(0)
  fraudAttempts             Int      @default(0)
  blockedTransactions       Int      @default(0)
  reviewedTransactions      Int      @default(0)
  webTransactions           Int      @default(0)
  mobileTransactions        Int      @default(0)
  apiTransactions           Int      @default(0)
  adminTransactions         Int      @default(0)
  desktopTransactions       Int      @default(0)
  mobileDeviceTransactions  Int      @default(0)
  tabletTransactions        Int      @default(0)
  peakHour                  Int?
  peakHourVolume            Int?
  offPeakVolume             Int?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime

  @@index([date])
  @@index([hour])
}

model transaction_events {
  id            String               @id
  transactionId String
  eventType     TransactionEventType
  status        String
  message       String?
  data          Json?
  source        String?
  triggeredBy   String?
  ipAddress     String?
  userAgent     String?
  duration      Int?
  createdAt     DateTime             @default(now())
  transactions  transactions         @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([eventType])
  @@index([status])
  @@index([transactionId])
}

model transaction_summaries {
  id                      String   @id
  userId                  String?
  period                  String
  startDate               DateTime
  endDate                 DateTime
  totalTransactions       Int      @default(0)
  totalAmount             Float    @default(0)
  totalFees               Float    @default(0)
  netAmount               Float    @default(0)
  successRate             Float    @default(0)
  paymentCount            Int      @default(0)
  paymentAmount           Float    @default(0)
  refundCount             Int      @default(0)
  refundAmount            Float    @default(0)
  creditCount             Int      @default(0)
  creditAmount            Float    @default(0)
  averageTransactionValue Float    @default(0)
  largestTransaction      Float    @default(0)
  smallestTransaction     Float    @default(0)
  createdAt               DateTime @default(now())
  updatedAt               DateTime
  users                   users?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([endDate])
  @@index([period])
  @@index([startDate])
  @@index([userId])
}

model transactions {
  id                  String               @id
  transactionId       String               @unique
  type                TransactionType
  status              TransactionStatus    @default(PENDING)
  amount              Float
  currency            String               @default("INR")
  userId              String?
  entityType          String?
  entityId            String?
  paymentGateway      String?
  gatewayOrderId      String?
  gatewayPaymentId    String?
  gatewaySignature    String?
  gatewayResponse     Json?
  description         String?
  notes               Json?
  metadata            Json?
  internalNotes       String?
  creditsAwarded      Int?                 @default(0)
  creditsUsed         Int?                 @default(0)
  creditBalance       Int?
  creditPackage       String?
  platformFee         Float?               @default(0)
  gatewayFee          Float?               @default(0)
  taxes               Float?               @default(0)
  gst                 Float?               @default(0)
  serviceTax          Float?               @default(0)
  processingFee       Float?               @default(0)
  netAmount           Float?
  refundAmount        Float?               @default(0)
  refundReason        String?
  refundedAt          DateTime?
  refundedBy          String?
  parentTransactionId String?
  isRefundable        Boolean              @default(true)
  subscriptionId      String?
  subscriptionPeriod  String?
  subscriptionCycle   Int?
  source              String?
  channel             String?
  campaign            String?
  medium              String?
  referrer            String?
  utmSource           String?
  utmMedium           String?
  utmCampaign         String?
  utmTerm             String?
  utmContent          String?
  userAgent           String?
  ipAddress           String?
  deviceType          String?
  browser             String?
  os                  String?
  location            Json?
  country             String?
  state               String?
  city                String?
  processedAt         DateTime?
  authorizedAt        DateTime?
  capturedAt          DateTime?
  settledAt           DateTime?
  failureReason       String?
  errorCode           String?
  retryCount          Int                  @default(0)
  maxRetries          Int                  @default(3)
  nextRetryAt         DateTime?
  riskScore           Float?
  fraudFlags          String[]
  isHighRisk          Boolean              @default(false)
  reviewStatus        String?
  reviewedBy          String?
  reviewedAt          DateTime?
  reviewNotes         String?
  supportTicketId     String?
  customerNotes       String?
  disputeId           String?
  disputeReason       String?
  disputeStatus       String?
  initiatedAt         DateTime             @default(now())
  submittedAt         DateTime?
  queuedAt            DateTime?
  startedAt           DateTime?
  completedAt         DateTime?
  expiredAt           DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime
  audit_logs          audit_logs[]
  transaction_events  transaction_events[]
  payments            payments?            @relation(fields: [entityId], references: [id], map: "transaction_payment_fkey")
  transactions        transactions?        @relation("transactionsTotransactions", fields: [parentTransactionId], references: [id])
  other_transactions  transactions[]       @relation("transactionsTotransactions")
  subscriptions       subscriptions?       @relation(fields: [subscriptionId], references: [id])
  users               users?               @relation(fields: [userId], references: [id])

  @@index([amount])
  @@index([country])
  @@index([createdAt])
  @@index([currency])
  @@index([isHighRisk])
  @@index([parentTransactionId])
  @@index([paymentGateway])
  @@index([processedAt])
  @@index([riskScore])
  @@index([source])
  @@index([status])
  @@index([subscriptionId])
  @@index([transactionId])
  @@index([type])
  @@index([userId])
}

model user_wearable_selections {
  id             String         @id
  userId         String
  wearableItemId String
  selectedAt     DateTime       @default(now())
  users          users          @relation(fields: [userId], references: [id], onDelete: Cascade)
  wearable_items wearable_items @relation(fields: [wearableItemId], references: [id], onDelete: Cascade)

  @@unique([userId, wearableItemId])
}

model users {
  id                       String                     @id
  email                    String                     @unique
  password                 String
  firstName                String?
  lastName                 String?
  avatar                   String?
  isEmailVerified          Boolean                    @default(false)
  emailVerifiedAt          DateTime?
  credits                  Int                        @default(0)
  role                     UserRole                   @default(USER)
  subscriptionType         SubscriptionType           @default(FREE)
  subscriptionEndsAt       DateTime?
  isActive                 Boolean                    @default(true)
  lastLoginAt              DateTime?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime
  audit_logs               audit_logs[]
  avatar_customizations    avatar_customizations[]
  email_notifications      email_notifications[]
  payments                 payments[]
  photos                   photos[]
  processing_jobs          processing_jobs[]
  projects                 projects[]
  sessions                 sessions[]
  subscriptions            subscriptions[]
  transaction_summaries    transaction_summaries[]
  transactions             transactions[]
  user_wearable_selections user_wearable_selections[]
  webhook_deliveries       webhook_deliveries[]
}

model wearable_items {
  id                       String                     @id
  name                     String
  category                 String
  subcategory              String?
  description              String?
  imageUrl                 String?
  hasImage                 Boolean                    @default(false)
  tags                     String[]
  style                    String?
  color                    String?
  material                 String?
  season                   String?
  occasion                 String?
  size                     String                     @default("ONE_SIZE")
  fit                      String                     @default("REGULAR")
  isActive                 Boolean                    @default(true)
  sortOrder                Int                        @default(0)
  imageMapping             Json?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime
  user_wearable_selections user_wearable_selections[]
}

model webhook_deliveries {
  id                String            @id
  userId            String?
  webhookEndpointId String
  eventType         String
  payload           Json
  status            WebhookStatus     @default(PENDING)
  httpStatus        Int?
  response          String?
  attempts          Int               @default(0)
  maxAttempts       Int               @default(3)
  nextRetryAt       DateTime?
  deliveredAt       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime
  users             users?            @relation(fields: [userId], references: [id])
  webhook_endpoints webhook_endpoints @relation(fields: [webhookEndpointId], references: [id], onDelete: Cascade)
}

model webhook_endpoints {
  id                 String               @id
  url                String
  secret             String
  events             String[]
  isActive           Boolean              @default(true)
  description        String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  webhook_deliveries webhook_deliveries[]
}

enum AuditSource {
  API
  WEBHOOK
  ADMIN_PANEL
  SYSTEM
  CRON_JOB
}

enum CustomizationStatus {
  DRAFT
  PROCESSING
  COMPLETED
  FAILED
}

enum EmailStatus {
  PENDING
  SENDING
  SENT
  FAILED
  CANCELLED
}

enum Fit {
  SLIM
  REGULAR
  LOOSE
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum ProcessingType {
  HEADSHOT_GENERATION
  AVATAR_GENERATION
  AVATAR_CUSTOMIZATION
  BACKGROUND_REMOVAL
  IMAGE_ENHANCEMENT
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  SUSPENDED
}

enum SubscriptionType {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum TransactionEventType {
  INITIATED
  SUBMITTED
  QUEUED
  STARTED
  AUTHORIZED
  CAPTURED
  COMPLETED
  FAILED
  CANCELLED
  EXPIRED
  VALIDATION_STARTED
  VALIDATION_PASSED
  VALIDATION_FAILED
  FRAUD_CHECK_STARTED
  FRAUD_CHECK_PASSED
  FRAUD_CHECK_FAILED
  PAYMENT_PROCESSING
  GATEWAY_REQUEST_SENT
  GATEWAY_RESPONSE_RECEIVED
  STATUS_UPDATED
  AMOUNT_UPDATED
  METADATA_UPDATED
  REFUND_INITIATED
  REFUND_PROCESSED
  REFUND_COMPLETED
  REFUND_FAILED
  DISPUTE_CREATED
  DISPUTE_UPDATED
  CHARGEBACK_RECEIVED
  DISPUTE_RESOLVED
  SETTLEMENT_INITIATED
  SETTLEMENT_COMPLETED
  SETTLEMENT_FAILED
  PAYOUT_PROCESSED
  WEBHOOK_SENT
  WEBHOOK_RECEIVED
  NOTIFICATION_SENT
  EMAIL_SENT
  SMS_SENT
  RETRY_ATTEMPTED
  RETRY_SCHEDULED
  RETRY_FAILED
  MAX_RETRIES_REACHED
  ADMIN_REVIEW_STARTED
  ADMIN_APPROVED
  ADMIN_REJECTED
  ADMIN_NOTE_ADDED
  MANUAL_INTERVENTION
  SYSTEM_ERROR
  TIMEOUT_OCCURRED
  CONNECTION_FAILED
  RATE_LIMIT_HIT
  USER_ACTION
  USER_CANCELLED
  USER_ABANDONED
  THIRD_PARTY_CALLBACK
  API_REQUEST
  API_RESPONSE
  DATA_EXPORTED
  REPORT_GENERATED
  COMPLIANCE_CHECK
}

enum TransactionStatus {
  PENDING
  SUBMITTED
  QUEUED
  PROCESSING
  AUTHORIZING
  AUTHORIZED
  AUTHORIZATION_FAILED
  CAPTURING
  CAPTURED
  CAPTURE_FAILED
  COMPLETED
  SETTLED
  CONFIRMED
  FAILED
  DECLINED
  CANCELLED
  EXPIRED
  TIMEOUT
  REJECTED
  ABANDONED
  REFUNDED
  PARTIALLY_REFUNDED
  REFUND_PENDING
  REFUND_FAILED
  DISPUTED
  CHARGEBACK
  CHARGEBACK_RESOLVED
  UNDER_REVIEW
  FLAGGED
  APPROVED
  BLOCKED
  PENDING_SETTLEMENT
  SETTLEMENT_FAILED
  RETRY
  RETRY_FAILED
  ON_HOLD
  SUSPENDED
  ARCHIVED
}

enum TransactionType {
  PAYMENT
  REFUND
  PARTIAL_REFUND
  CREDIT_PURCHASE
  CREDIT_USAGE
  CREDIT_REFUND
  CREDIT_TRANSFER
  CREDIT_EXPIRY
  BONUS_CREDIT
  REFERRAL_BONUS
  PROMOTIONAL_CREDIT
  ADMIN_CREDIT_ADJUSTMENT
  SUBSCRIPTION
  SUBSCRIPTION_RENEWAL
  SUBSCRIPTION_UPGRADE
  SUBSCRIPTION_DOWNGRADE
  SUBSCRIPTION_REFUND
  SUBSCRIPTION_PRORATION
  HEADSHOT_GENERATION
  AVATAR_CUSTOMIZATION
  PREMIUM_FEATURE
  BULK_PROCESSING
  PLATFORM_FEE
  GATEWAY_FEE
  SERVICE_FEE
  PROCESSING_FEE
  ADJUSTMENT
  CORRECTION
  RECONCILIATION
  CHARGEBACK
  DISPUTE
  DISPUTE_RESOLUTION
  SETTLEMENT
  PAYOUT
  WITHDRAWAL
  TRANSFER
  GIFT_CARD
  VOUCHER
  CASHBACK
  LOYALTY_POINTS
  AFFILIATE_COMMISSION
}

enum UserRole {
  USER
  PREMIUM
  ADMIN
  SUPER_ADMIN
}

enum WebhookStatus {
  PENDING
  DELIVERED
  FAILED
  CANCELLED
}
